<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-19T20:48:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zuno</title><author><name>Zuno</name></author><entry><title type="html">[백준] 꿀 따기 21758 JS</title><link href="http://localhost:4000/2024/07/19/boj-21758.html" rel="alternate" type="text/html" title="[백준] 꿀 따기 21758 JS" /><published>2024-07-19T16:45:13+09:00</published><updated>2024-07-19T16:45:13+09:00</updated><id>http://localhost:4000/2024/07/19/boj-21758</id><content type="html" xml:base="http://localhost:4000/2024/07/19/boj-21758.html"><![CDATA[<h1 id="-백준--꿀-따기-21758-js">[ 백준 ] 꿀 따기 21758 (js)</h1>

<p><a href="https://www.acmicpc.net/problem/21758"></a></p>

<h2 id="문제해석">문제해석</h2>

<hr />

<ul>
  <li>1차원 배열이 있고, 해당 배열내에 꿀통과 벌 2마리가 존재한다.</li>
  <li>벌은 꿀통을 향해 날라가면서 만나는 배열의 값들을 모두 저장한다.</li>
  <li>벌이 시작하는 위치의 꿀은 저장할 수 없고, 꿀통에 위치한 꿀은 저장할 수 있다.</li>
  <li>가장 많은 꿀을 모으는게 목표</li>
</ul>

<h2 id="문제접근">문제접근</h2>

<hr />

<ul>
  <li>꿀통을 기준으로  왼쪽으로 두마리, 오른쪽으로 두마리, 좌우로 각각 한마리 있는 경우로 총 3가지 경우로 나눌 수 있다.</li>
  <li>먼저 왼쪽으로 2마리가 있을 경우 꿀통은 오른쪽 끝에 위치할 때, 벌중 하나는 가장 왼쪽에 위치할때 (인덱스 0) 가 가장 그리디하다.</li>
  <li>오른쪽으로 2마리가 있을경우도 마찬가지로 꿀통이 왼쪽 끝에 위치할 때, 벌중 하나는 가장 오른쪽에 위치할때 (인덱스 N - 1) 가 가장 그리디하다.</li>
  <li>마지막으로 좌우로 각각한마리 있는 경우에는 벌들이 좌,우 양끝에 위치할 때가 가장 그리디하다.</li>
</ul>

<h2 id="문제해결">문제해결</h2>

<hr />

<ul>
  <li>문제접근에서 나눈 3가지 경우로 단순하게 모두 더해서 계산하면 왼쪽의 경우만 계산해도 10000C2 * 10000 즉 거의 <strong>10^10 의 연산횟수</strong>가 나오기 때문에 시간 초과가 발생한다.</li>
  <li>시간 초과를 해결하기 위해 그 순간순간 모든 값을 더하는것이 아닌 누적 합을 활용한다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// [i ~ j] 까지의 꿀의 합
// 단순하게 더하면 j - i O(N)이 걸리지만
// 아래와 같이 누적합을 활용하면 O(1)에 해결할 수 있다.

Sum[i, j] = Sum[0, j] - Sum[0, i - 1] 
</code></pre></div></div>

<ul>
  <li>마지막으로 이미 벌이 존재하는곳에 위치하는 꿀은 채집할 수 없기에 그 부분을 고려해주는것을 잊지 말아야한다.</li>
</ul>

<h2 id="코드">코드</h2>

<hr />

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nf">readFileSync</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">toString</span><span class="p">().</span><span class="nf">trim</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">shift</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">ary</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">shift</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nb">Number</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">psum</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">100010</span><span class="p">).</span><span class="nf">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// psum[n] n까지의 합</span>

<span class="kd">let</span> <span class="nx">ans</span> <span class="o">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ary</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){</span>
    <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ary</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sum</span>
    <span class="nx">sum</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>

<span class="c1">// 왼쪽에 몰려있는 경우 꿀통은 항상 마지막.</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){</span>
    <span class="c1">// bee1 의 위치는 항상 0으로 고정</span>
    <span class="kd">const</span> <span class="nx">bee1</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ary</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="kd">const</span> <span class="nx">bee2</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="nx">ans</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">bee1</span> <span class="o">+</span> <span class="nx">bee2</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">// 오른쪽에 몰려있는 경우</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">N</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="nx">i</span><span class="p">){</span>
		<span class="c1">// bee1 의 위치는 항상 N - 1 로 고정</span>
    <span class="kd">const</span> <span class="nx">bee1</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">N</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ary</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="kd">const</span> <span class="nx">bee2</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ary</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="nx">ans</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">bee1</span> <span class="o">+</span> <span class="nx">bee2</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 그 외의 경우. 벌통을 기준으로 계산한다.</span>
<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">){</span>
    <span class="kd">const</span> <span class="nx">bee1</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ary</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="kd">const</span> <span class="nx">bee2</span> <span class="o">=</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">N</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">psum</span><span class="p">[</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="nx">ans</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">bee1</span> <span class="o">+</span> <span class="nx">bee2</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">ans</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zuno</name></author><summary type="html"><![CDATA[[ 백준 ] 꿀 따기 21758 (js)]]></summary></entry><entry><title type="html">[JS Deep Dive] Promise (1)</title><link href="http://localhost:4000/2024/07/19/js-promise1.html" rel="alternate" type="text/html" title="[JS Deep Dive] Promise (1)" /><published>2024-07-19T16:45:13+09:00</published><updated>2024-07-19T16:45:13+09:00</updated><id>http://localhost:4000/2024/07/19/js-promise1</id><content type="html" xml:base="http://localhost:4000/2024/07/19/js-promise1.html"><![CDATA[<h1 id="js-deep-dive-promise-1">[JS Deep Dive] Promise (1)</h1>

<h1 id="promise란-">Promise란 ?</h1>

<hr />

<p>먼저 Promise 가 무엇인지 알아보자.  MDN에서는 다음과 같이 설명한다.</p>

<aside>
💡 **`Promise`** 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냅니다.

**`Promise`** 는 프로미스가 생성된 시점에는 알려지지 않았을 수도 있는 값을 위한 대리자로, 비동기 연산이 종료된 이후에 결과 값과 실패 사유를 처리하기 위한 처리기를 연결할 수 있습니다. 프로미스를 사용하면 비동기 메서드에서 마치 동기 메서드처럼 값을 반환할 수 있습니다. **다만 최종 결과를 반환하는 것이 아니고, 미래의 어떤 시점에 결과를 제공하겠다는 '프로미스(promise)'를 반환**합니다.

[https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise)

</aside>

<p>음.. 잘 이해가 안간다 경험상으로는 Promise객체 뒤에 .then()과.catch()를 이용해서 비동기 함수의 결과값을 받아와서 원하는대로 조작할 수 있다는 것만 경험상으로 기억한다.asdfasfdafsd</p>

<p>일단은 Promise 가 나오게 된 이유를 먼저 공부해보자</p>

<h1 id="promise-이전의-비동기-처리">Promise 이전의 비동기 처리</h1>

<hr />

<h2 id="비동기-함수란-무엇일까">비동기 함수란 무엇일까?</h2>

<blockquote>
  <p><strong>함수 내에서 비동기로 동작하는 코드를 포함한 함수, 함수내에서 비동기로 동작하는 코드가 완료되지않아도 함수가 종료된다.</strong></p>

</blockquote>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">함수1</span> <span class="p">()</span> <span class="p">{</span>
	<span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">setTimeout도 끝났어요~</span><span class="dl">"</span><span class="p">)</span> <span class="p">},</span> <span class="mi">1000</span> <span class="p">)</span>
<span class="p">}</span>

<span class="nf">함수1</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">함수1 끝났어요~</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// 실행결과 </span>
<span class="c1">// "함수1 끝났어요~"</span>
<span class="c1">// "setTimeout도 끝났어요~"</span>
</code></pre></div></div>

<p>위의 예제에서 보면 <strong>함수1</strong> 에 존재하는  setTimeout함수가 비동기 함수에 해당된다.</p>

<p>함수1 내부에서 setTimeout 함수가 실행됐지만, <strong>setTImeout 함수가 완료되기전에 함수1이 먼저 종료</strong>되고 그 이후에 setTimeout의 함수의 실행을 확인할 수 있다.</p>

<p>위와같이 동작하게 되는 이유는 자바스크립트의 <strong>비동기 처리방식</strong>, <strong>이벤트 루프</strong>등을 찾아보면 알 수 있다.</p>

<p>위 코드처럼 Callback 함수로 모든걸 해결하면 되지않을까? 싶지만 2개의 문제가있다</p>

<ol>
  <li>콜백 지옥</li>
  <li>에러 처리의 한계a</li>
</ol>

<p>먼저 콜백 지옥에 대해서 간략하게 알아보자. 왜 콜백지옥이 형성될까?</p>

<p>위의 예제에서 봤듯이 상위 스코프의 함수들이 모두 실행되고 비동기 함수가 실행되기 때문에 비동기 함수를 호출한 함수에서 비동기 값을 사용할 수 없게된다. 따라서, 그 결과를 사용하기 위해 콜백함수를  중첩하게 된다.</p>

<ul>
  <li>
    <p>콜백 예제</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nf">callbackHellExample</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">xhr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
      <span class="nx">xhr1</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts/1</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="nx">xhr1</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">xhr1</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr1</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">첫 번째 콜백:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">xhr1</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
    
              <span class="kd">const</span> <span class="nx">xhr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
              <span class="nx">xhr2</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts/2</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
              <span class="nx">xhr2</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
                  <span class="k">if </span><span class="p">(</span><span class="nx">xhr2</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr2</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">두 번째 콜백:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">xhr2</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
    
                      <span class="kd">const</span> <span class="nx">xhr3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
                      <span class="nx">xhr3</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts/3</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                      <span class="nx">xhr3</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
                          <span class="k">if </span><span class="p">(</span><span class="nx">xhr3</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr3</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                              <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">세 번째 콜백:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">xhr3</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
    
                              <span class="kd">const</span> <span class="nx">xhr4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
                              <span class="nx">xhr4</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts/4</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                              <span class="nx">xhr4</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
                                  <span class="k">if </span><span class="p">(</span><span class="nx">xhr4</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr4</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                                      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">네 번째 콜백:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">xhr4</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
    
                                      <span class="kd">const</span> <span class="nx">xhr5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
                                      <span class="nx">xhr5</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://jsonplaceholder.typicode.com/posts/5</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                                      <span class="nx">xhr5</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
                                          <span class="k">if </span><span class="p">(</span><span class="nx">xhr5</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xhr5</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                                              <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">다섯 번째 콜백:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">xhr5</span><span class="p">.</span><span class="nx">responseText</span><span class="p">));</span>
                                          <span class="p">}</span>
                                      <span class="p">};</span>
                                      <span class="nx">xhr5</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
                                  <span class="p">}</span>
                              <span class="p">};</span>
                              <span class="nx">xhr4</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
                          <span class="p">}</span>
                      <span class="p">};</span>
                      <span class="nx">xhr3</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
                  <span class="p">}</span>
              <span class="p">};</span>
              <span class="nx">xhr2</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
          <span class="p">}</span>
      <span class="p">};</span>
      <span class="nx">xhr1</span><span class="p">.</span><span class="nf">send</span><span class="p">();</span>
  <span class="p">}</span>
    
  <span class="nf">callbackHellExample</span><span class="p">();</span>
    
</code></pre></div>    </div>

    <p>각각의 xhr 요청이 완료되면, 해당 요청의 성공을 확인하고, 성공을 했다면 다음 요청을 반복하는 예제이다.</p>

    <p>항상 콜백지옥을 얘기하면 나오는 파동권을 맞은 코드모양이 나오게 되고 딱봐도 읽기 싫게 생겼다..</p>
  </li>
</ul>

<p>콜백지옥에 대해서는 많이 들어봤지만 에러 처리의 한계는 처음 들어봤다, 어떤 경우일까?</p>

<p>위의 경우와 마찬가지인 문제다. 비동기함수를 실행한 함수는 이미 종료를 한 상태이기 때문에 비동기 함수를 try, catch 구문으로 감싸서 에러처리를 해주려고해도 할 수 없게된다.</p>

<ul>
  <li>
    <p>에러처리 예제</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">function</span> <span class="nf">함수1</span><span class="p">()</span> <span class="p">{</span>
  	<span class="k">try</span> <span class="p">{</span>
  		<span class="nf">setTimout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
  	<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  		<span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
  	<span class="p">}</span>
  <span class="p">}</span>
    
  <span class="nf">함수1</span><span class="p">()</span>
</code></pre></div>    </div>

    <p>콜백함수가 실행 됐을 때 이미 함수1의 컨텍스트는 콜스택에서 제외됐기 때문에 catch 절을 실행할 수 없게된다.</p>
  </li>
</ul>

<aside>
💡 위 내용을 공부하는 과정에서 비동기 처리와 실제로 사용하는 컴포넌트에 대해서 아래와 같은 의문이 들었다.

1.  우리가 사용하는 컴포넌트 내부에서는 비동기 함수를 실행시키고 있다.

2. 비동기 함수의 콜백함수는 함수가 종료되고 나서 콜스택이 비고나서 실행된다. 즉 return 이 되고나서 콜백함수들이 실행된다. 콜백함수가 state의 값을 변경한다.
 
3. 그렇다면 해당 결과로 인해 리 렌더링이 일어나고 계속해서 다시 비동기 함수가 호출되는것 아닌가??

4. ~~여태까지 어떻게 쓴거지 ???~~

결론부터 말하자면 Component 의 **mount** 와 **re-rendering** 이 다르기 때문에 처음 컴포넌트가 마운트시 1회만 비동기 함수가 사용됐기 때문에 괜찮았다.

지금까지 useEffect 내부에 비동기함수를 호출하고, 콜백함수로 State의 변화를 일으키고 데이터를 받아오도록 사용했다. 그 과정에서 의존성배열을 [] 와 같이 설정하여 최초의 마운트시만 실행되게했기 때문에 괜찮았다. 

리액트는 파이버를 통해 컴포넌트들을 관리하고, 해당 파이버가 새롭게만들어지는게 마운트, 기존 파이버의 값을 수정하는 작업이 리렌더링이라고 볼 수 있다.

~~리렌더링과 마운트의 개념을 몰랐기에, 리렌더링도 새로 그리는거니깐 마운트랑 똑같은거아니야??? 라고 생각했던게 문제였고 지금이라도 알아서 다행이다….~~ 아직도 조금 헷갈리니 예제를 만들어서 마운트와 리렌더링에 대해서 제대로 이해할 수 있도록 해야겠다

</aside>

<h2 id="정리">정리</h2>

<hr />

<p>Promise 객체가 있기 이전에는 비동기 처리를 하기 위해서는 콜백함수들을 이용해서 처리했고, 그 과정에서 콜백지옥이 생성되는 문제가 존재했고, 비동기 함수의 에러처리를 할 수 없다는 문제가 있었다.</p>

<p>이러한 문제들을 해결하기위해 Promise 객체가 태어났음을 알 수 있게 됐다 !</p>]]></content><author><name>Zuno</name></author><summary type="html"><![CDATA[[JS Deep Dive] Promise (1)]]></summary></entry><entry><title type="html">Dinosaurs are extinct today</title><link href="http://localhost:4000/2020/01/27/dinosaurs.html" rel="alternate" type="text/html" title="Dinosaurs are extinct today" /><published>2020-01-27T12:45:13+09:00</published><updated>2020-01-27T12:45:13+09:00</updated><id>http://localhost:4000/2020/01/27/dinosaurs</id><content type="html" xml:base="http://localhost:4000/2020/01/27/dinosaurs.html"><![CDATA[<p>Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.</p>

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class="section-heading">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class="blockquote">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class="section-heading">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class="img-fluid" src="https://source.unsplash.com/Mn9Fa_wQH-M/800x450" alt="Demo Image">
<span class="caption text-muted">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href="http://spaceipsum.com/">Space Ipsum</a>. Photographs by <a href="https://unsplash.com/">Unsplash</a>.</p>]]></content><author><name>Zuno</name></author><summary type="html"><![CDATA[Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory.]]></summary></entry></feed>